{"version":3,"file":"index.js","mappings":"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","sources":["webpack://vootv-api/./src/app.config.ts","webpack://vootv-api/./src/book/book.controller.ts","webpack://vootv-api/./src/book/book.route.ts","webpack://vootv-api/./src/cart/cart.controller.ts","webpack://vootv-api/./src/cart/cart.route.ts","webpack://vootv-api/./src/index.ts","webpack://vootv-api/./src/user/user.middleware.ts","webpack://vootv-api/./src/utils/constants.ts","webpack://vootv-api/./src/utils/env.ts","webpack://vootv-api/./src/utils/prisma.ts","webpack://vootv-api/./src/utils/request-handler.config.ts","webpack://vootv-api/external commonjs \"@prisma/client\"","webpack://vootv-api/external commonjs \"cors\"","webpack://vootv-api/external commonjs \"dotenv/config\"","webpack://vootv-api/external commonjs \"envalid\"","webpack://vootv-api/external commonjs \"express\"","webpack://vootv-api/external commonjs \"http-errors\"","webpack://vootv-api/external commonjs \"jsonwebtoken\"","webpack://vootv-api/external commonjs \"morgan\"","webpack://vootv-api/external node-commonjs \"crypto\"","webpack://vootv-api/webpack/bootstrap","webpack://vootv-api/webpack/startup"],"sourcesContent":["import 'dotenv/config';\r\nimport express, {Request, Response, NextFunction} from 'express';\r\nimport morgan from 'morgan';\r\nimport cors from 'cors';\r\nimport createHttpError, {isHttpError} from 'http-errors';\r\nimport env from './utils/env';\r\nimport cartRoutes from './cart/cart.route';\r\nimport bookRoutes from './book/book.route';\r\n\r\nconst homeMessage = `\r\n<div style=\"display: flex; align-items: center; justify-content: center; height: 90vh\"> \r\n<h1 style=\"font-size: 72px; background: -webkit-linear-gradient(45deg, #09009f, #00ff95 80%); -webkit-background-clip: text;\r\n-webkit-text-fill-color: transparent;\">BOOKSTORE REST API</h1>\r\n</div>\r\n`;\r\n\r\nconst app = express();\r\n\r\napp.use(morgan('dev'));\r\n\r\napp.use(cors({origin: [env.CLIENT_URL], exposedHeaders: ['x-access-token']}));\r\n\r\napp.use(express.json());\r\n\r\napp.use(express.urlencoded({extended: true}));\r\n\r\napp.get('/', (req, res) => res.status(200).send(homeMessage));\r\n\r\napp.use('/cart', cartRoutes);\r\n\r\napp.use('/book', bookRoutes);\r\n\r\n//Not found\r\napp.use((req, res, next) => next(createHttpError(404, 'Endpoint not found')));\r\n\r\n//Error Middleware\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\napp.use((error: unknown, req: Request, res: Response, next: NextFunction) => {\r\n  console.error(error);\r\n  let errorMessage = 'An unknown error occurred';\r\n  let statusCode = 500;\r\n  //Todo Handle prisma invalid id error\r\n  if (isHttpError(error)) {\r\n    statusCode = error.status;\r\n    errorMessage = error.message;\r\n  }\r\n  res.status(statusCode).json({message: errorMessage, statusCode});\r\n});\r\n\r\nexport default app;\r\n","import {Controller} from '../utils/request-handler.config';\r\nimport prisma from '../utils/prisma';\r\nimport {Request} from 'express';\r\nimport {Book} from '@prisma/client';\r\nimport {OMIT_OPTIONS} from '../utils/constants';\r\nimport createHttpError from 'http-errors';\r\n\r\n//Todo Change category query parameter\r\ntype BookQuery = {\r\n  group: 'bestselling' | 'featured';\r\n  category: 'art' | 'romance' | 'thriller' | 'health';\r\n  take: string;\r\n};\r\n\r\n//Switch books postion and return 6 books\r\nfunction swapBooks<T>(books: T[]) {\r\n  for (let i = books.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [books[i], books[j]] = [books[j], books[i]];\r\n  }\r\n  return books.slice(0, 6);\r\n}\r\n\r\nexport default Controller({\r\n  async getBooksByCategory(req: Request<{}, {}, {}, BookQuery>, res) {\r\n    const {group, category} = req.query;\r\n    let books: Omit<Book, 'createdAt' | 'updatedAt'>[];\r\n    switch (group) {\r\n      case 'bestselling':\r\n        books = await prisma.book.findMany({\r\n          where: {bestSelling: true},\r\n          ...OMIT_OPTIONS\r\n        });\r\n        books = swapBooks<(typeof books)[number]>(books);\r\n        break;\r\n      case 'featured':\r\n        books = await prisma.book.findMany({\r\n          where: {bestSelling: false},\r\n          ...OMIT_OPTIONS\r\n        });\r\n        books = swapBooks<(typeof books)[number]>(books);\r\n        break;\r\n      default:\r\n        books = await prisma.book.findMany({\r\n          ...OMIT_OPTIONS,\r\n          where: {category}\r\n        });\r\n        books = swapBooks(books);\r\n    }\r\n    return res.status(200).json(books);\r\n  },\r\n\r\n  async getAllBooks(_, res) {\r\n    const books = await prisma.book.findMany({\r\n      select: {id: true, title: true, authors: true, category: true}\r\n    });\r\n    res.status(200).json(books);\r\n  },\r\n\r\n  async getBook(req: Request<{id: string}>, res) {\r\n    const book = await prisma.book.findUnique({where: {id: req.params.id}});\r\n    if (!book) throw createHttpError(404, 'Book not found');\r\n    return res.status(200).json(book);\r\n  }\r\n});\r\n","import {Router} from 'express';\r\nimport bookController from './book.controller';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', bookController.getAllBooks);\r\n\r\nrouter.get('/category', bookController.getBooksByCategory);\r\n\r\nrouter.get('/:id', bookController.getBook);\r\n\r\n\r\nexport default router;\r\n","import prisma from '../utils/prisma';\r\nimport {Controller} from '../utils/request-handler.config';\r\nimport {OMIT_OPTIONS} from '../utils/constants';\r\nimport {Cart} from '@prisma/client';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\n\r\nconst findCart = (userId: string) => {\r\n  return prisma.cart.findFirst({\r\n    where: {userId, purchased: false},\r\n    ...OMIT_OPTIONS,\r\n    include: {\r\n      cartItems: {\r\n        ...OMIT_OPTIONS,\r\n        include: {\r\n          book: {\r\n            select: {\r\n              id: true,\r\n              title: true,\r\n              authors: true,\r\n              price: true,\r\n              thumbnail: {select: {small: true}}\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default Controller({\r\n  async getCartItems(req, res) {\r\n    const cart = await findCart(req.user.id);\r\n    return res.status(200).json(cart ? cart.cartItems : []);\r\n  },\r\n\r\n  async addToCart(req: Request<{}, {}, {bookId: string}>, res) {\r\n    const {bookId} = req.body;\r\n    const existingCart = await findCart(req.user.id);\r\n    let newCart: Cart;\r\n    if (!existingCart) {\r\n      newCart = await prisma.cart.create({data: {userId: req.user.id}});\r\n    } else {\r\n      const itemInCart = existingCart.cartItems.find(\r\n        item => item.book.id === bookId\r\n      );\r\n      if (itemInCart) throw createHttpError(403, 'Item already in cart');\r\n    }\r\n    await prisma.cartItem.create({\r\n      data: {\r\n        cartId: existingCart ? existingCart.id : newCart.id,\r\n        bookId,\r\n        quantity: 1\r\n      }\r\n    });\r\n    return res.status(201).json({message: 'Item added to cart'});\r\n  },\r\n\r\n  async changeCartQuantity(\r\n    req: Request<{id: string}, {}, {quantity: number}>,\r\n    res\r\n  ) {\r\n    await prisma.cartItem.update({\r\n      where: {id: req.params.id},\r\n      data: {quantity: req.body.quantity}\r\n    });\r\n\r\n    res.status(200).json({message: 'Cart item updated'});\r\n  },\r\n\r\n  async deleteFromCart(req: Request<{id: string}>, res) {\r\n    await prisma.cartItem.delete({where: {id: req.params.id}});\r\n    res.status(200).json({message: 'Cart item deleted'});\r\n  }\r\n});\r\n","import {Router} from 'express';\r\nimport cartController from './cart.controller';\r\nimport {userMiddleware} from '../user/user.middleware';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', userMiddleware, cartController.getCartItems);\r\n\r\nrouter.post('/', userMiddleware, cartController.addToCart);\r\n\r\nrouter.patch('/:id', userMiddleware, cartController.changeCartQuantity);\r\n\r\nrouter.delete('/:id', userMiddleware, cartController.deleteFromCart);\r\n\r\nexport default router;\r\n","import app from './app.config';\r\nimport env from './utils/env';\r\nimport prisma from './utils/prisma';\r\n\r\nconst PORT = env.PORT;\r\n\r\nasync function bootstrap() {\r\n  try {\r\n    await prisma.$connect();\r\n    console.log('Connected to database');\r\n    app.listen(PORT, () => console.log('Listening on PORT ' + PORT));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nbootstrap();\r\n","import prisma from '../utils/prisma';\r\nimport env from '../utils/env';\r\nimport {asyncWrapper} from '../utils/request-handler.config';\r\nimport jwt from 'jsonwebtoken';\r\nimport {randomInt, randomUUID} from 'crypto';\r\n\r\nfunction generatePhoneNumber() {\r\n  const numPrefixes = ['080', '081', '090', '070', '091'];\r\n  const number = randomInt(10000000, 99999999).toString();\r\n  const randomIndex = Math.floor(Math.random() * (numPrefixes.length + 1));\r\n  return numPrefixes[randomIndex] + number;\r\n}\r\n\r\nfunction generateEmail() {\r\n  const EMAIL_PREFIX = 'bookstore';\r\n  const EMAIL_ID = randomUUID().slice(0, 5);\r\n  const email = `${EMAIL_PREFIX}-${EMAIL_ID}@bookstore.com`;\r\n  return email;\r\n}\r\n\r\n//Todo Add function to mail me when a new user is created \r\nasync function createUser() {\r\n  const phoneNumber = generatePhoneNumber();\r\n  const email = generateEmail();\r\n  const user = await prisma.user.create({\r\n    data: {email, phoneNumber},\r\n    omit: {createdAt: true, updatedAt: true}\r\n  });\r\n  return user;\r\n}\r\n\r\ntype User = Awaited<ReturnType<typeof createUser>>;\r\n\r\nfunction createToken(user: User) {\r\n  const token = jwt.sign({user}, env.JWT_SECRET, {expiresIn: '30 days'});\r\n  return token;\r\n}\r\n\r\nexport const userMiddleware = asyncWrapper(async (req, res, next) => {\r\n  const {authorization} = req.headers;\r\n  if (!authorization || !authorization.split(' ')[1]) {\r\n    const user = await createUser();\r\n    const token = createToken(user);\r\n    req.user = user;\r\n    res.set('x-access-token', token);\r\n    next();\r\n    return;\r\n  }\r\n  const token = authorization.split(' ')[1];\r\n  const payload: any = jwt.verify(token, env.JWT_SECRET);\r\n  req.user = payload.user;\r\n  next();\r\n});\r\n","export const OMIT_OPTIONS = {omit: {createdAt: false, updatedAt: false}};\r\n","import {cleanEnv, str, num} from 'envalid';\r\n\r\nexport default cleanEnv(process.env, {\r\n  PORT: num({default: 4001}),\r\n  DATABASE_URL: str(),\r\n  JWT_SECRET: str(),\r\n  CLIENT_URL: str()\r\n});\r\n","import {PrismaClient} from '@prisma/client';\r\n\r\nlet prisma: PrismaClient;\r\n\r\ndeclare global {\r\n  var __prisma: PrismaClient | undefined;\r\n}\r\n\r\nif (!global.__prisma) {\r\n  global.__prisma = new PrismaClient();\r\n}\r\n\r\nprisma = global.__prisma;\r\n\r\nexport default prisma;\r\n","import {Request, Response, NextFunction} from 'express';\r\n\r\nexport type CustomRequestHandler<T = any> = (\r\n  req: Request,\r\n  res: Response,\r\n  next?: NextFunction,\r\n  ...rest: T[]\r\n) => Promise<void | Response>;\r\n\r\nexport const asyncWrapper = (fn: CustomRequestHandler) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await fn(req, res, next);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const Controller = <T extends {[K in keyof T]: CustomRequestHandler}>(\r\n  controllers: T\r\n) => {\r\n  for (let key of Object.keys(controllers)) {\r\n    controllers[key] = asyncWrapper(controllers[key]);\r\n  }\r\n  return controllers;\r\n};\r\n","module.exports = require(\"@prisma/client\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv/config\");","module.exports = require(\"envalid\");","module.exports = require(\"express\");","module.exports = require(\"http-errors\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"morgan\");","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["app","use","origin","CLIENT_URL","exposedHeaders","json","urlencoded","extended","get","req","res","status","send","next","error","console","errorMessage","statusCode","isHttpError","message","swapBooks","books","i","length","j","Math","floor","random","slice","Controller","getBooksByCategory","group","category","query","book","findMany","where","bestSelling","OMIT_OPTIONS","getAllBooks","_","select","id","title","authors","getBook","findUnique","params","router","Router","findCart","userId","cart","findFirst","purchased","include","cartItems","price","thumbnail","small","getCartItems","user","addToCart","bookId","body","existingCart","newCart","find","item","create","data","cartItem","cartId","quantity","changeCartQuantity","update","deleteFromCart","delete","userMiddleware","post","patch","PORT","$connect","log","listen","bootstrap","createUser","phoneNumber","numPrefixes","number","randomInt","toString","generatePhoneNumber","email","randomUUID","omit","createdAt","updatedAt","asyncWrapper","authorization","headers","split","token","sign","JWT_SECRET","expiresIn","createToken","set","payload","verify","cleanEnv","process","env","num","default","DATABASE_URL","str","prisma","global","__prisma","PrismaClient","fn","controllers","key","Object","keys","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}